# Figures for descriptive statistics
# Written by Kevin Potter
# email: kevin.w.potter@gmail.com
# Please email me directory if you 
# have any questions or comments
# Last updated 2018-04-12

# Table of contents
# 1) Initial setup
# 2) Boxplots of hits over conditions
# 3) Overall hit and false alarm rates
# 4) d' versus self-reported highs
#   4.1) get_scatter_data
#   4.2) quick_scatter
# 5) Criterion versus self-reported highs
# 6) Hits versus self-reported highs
# 7) BOLD estimates versus self-reported highs
# 8) Dosage versus self-reported highs
# 9) d' versus dosage
#   9.1) quick_scatter_dosage
# 10) Overall fNIRS BOLD response by conditions
# 11) d' differences versus BOLD differences
#   11.1) quick_scatter_fNIRS
# 12) BOLD differences versus hit rates/correct omissions

###
### 1) Initial setup
###

# Save current working directory
orig_dir = getwd()

# Navigate to project directory
setwd( '..' )
proj_dir = getwd()

# Indicate which code segments to run
run_code = c(
  T, # Boxplots of hits over conditions
  F, # Distributions of d' and criterion estimates
  F, # Scatter plots of d' against self-reported highs
  F, # Scatter plots of criterion against self-reported highs
  F, # Scatter plots of hits against self-reported highs
  F, # Scatter plots of HbO against self-reported highs
  F, # Scatter plots of dosage against self-reported highs
  F, # Scatter plots of d' against dosage
  F, # Overall fNIRS BOLD response by conditions
  F, # d' differences versus BOLD differences
  F  # BOLD differences against FA/CR differences
)

# Load in useful packages

# Collection of useful functions
# devtools::install_github("rettopnivek/utilityf")
library( utilityf )

# Packages for easier manipulation of data frames
# install.packages( 'dplyr' )
library(dplyr)

# Load in data
setwd( 'Data' )
load( "NBack_3_19_2018.RData" )
setwd( proj_dir )

# Custom functions
setwd( 'R' );
source( 'Useful_functions.R' )
setwd( proj_dir )

# Indicate whether to save figures in a PDF file
savePlot = T
if ( savePlot ) {
  setwd( 'Figures' )
  pdf( 'DS_script_output.pdf', width = 12 )
  setwd( proj_dir )
  
  # Create a table of contents for 
  # figures
  
  tc_index = c(
    run_code[1],
    rep( run_code[2], 2 ),
    rep( run_code[3], 2 ),
    rep( run_code[4], 2 ),
    rep( run_code[5], 2 ),
    rep( run_code[6], 5 ),
    run_code[7],
    rep( run_code[8], 2 ),
    run_code[9],
    rep( run_code[10], 2*5 ),
    rep( run_code[11], 5 ))
  
  # Convenience function to create 
  # table of contents for self-reported 
  # highs scatter plots
  tbl_cnt_sc = function( hdr, tbl_cnt, val = 1:2, 
                         cnst = 'versus self-reported highs' ) {
    
    # Constructors
    tsk = c( '0-back', '2-back' )

    if ( any(val > 0) ) {
      for ( i in val ) {
        tbl_cnt = c( tbl_cnt,
                     paste( hdr, ' ',
                            cnst, ' ', 
                            '(', tsk[val[i]], ')',
                            sep = '' ) )
      }
    } else {
      tbl_cnt = c( tbl_cnt,
                   paste( hdr, ' ',
                          cnst, 
                          sep = '' ) )
    }
    
    return( tbl_cnt )
  }
  
  # Initialize table of contents
  tbl_cnt = c(
    # run_code[1]
    "Percent hits by condition",
    # run_code[2]
    "d' distributions by condition",
    "Bias distributions by condition"
  )
  
  # run_code[3]
  tbl_cnt = tbl_cnt_sc( "d' differences", tbl_cnt )
  # run_code[4]
  tbl_cnt = tbl_cnt_sc( "Criterion differences", tbl_cnt )
  # run_code[5]
  tbl_cnt = tbl_cnt_sc( "Hit rate differences", tbl_cnt )
  
  # run_code[6]
  roi = c( 'HbO (R. DLPFC)',
           'HbO (L. DLPFC)',
           'HbO (MPFC)',
           'HbO (R. VLPFC)',
           'HbO (L. VLPFC)' )
  for ( j in 1:5 ) {
    tbl_cnt = tbl_cnt_sc( roi[j], tbl_cnt, val = 2 )
  }
  
  # run_code[7]
  tbl_cnt = c( tbl_cnt,
               'Dosage differences versus self-reported high' )
  # run_code[8]
  tbl_cnt = c( tbl_cnt,
               "d' versus dosage amount (0-back)",
               "d' versus dosage amount (2-back)" )
  
  # run_code[9]
  tbl_cnt = c( tbl_cnt,
               "Overall fNIRS BOLD response by conditions" )
  
  # run_code[10]
  for ( j in 1:5 ) {
    tbl_cnt = tbl_cnt_sc( "d' differences", tbl_cnt, 
                          cnst = paste( "versus", roi[j],
                                        "differences" ) )
  }
  
  # run_code[11]
  roi = c( 'BOLD (R. DLPFC)',
           'BOLD (L. DLPFC)',
           'BOLD (MPFC)',
           'BOLD (R. VLPFC)',
           'BOLD (L. VLPFC)' )
  for ( j in 1:5 ) {
    tbl_cnt = tbl_cnt_sc( "FA/CO differences", tbl_cnt, val = 0,
                          cnst = paste( "versus", roi[j],
                                        "differences" ) )
  }
  
  # Generate table of contents
  tableContents( tbl_cnt[ tc_index ] )
  
}

# Create a new data frame that
# a) Excludes the combined trials
# b) Has separate variables for hits and false alarms
all_ptbp = dat %>% 
  filter( Task != 'Combined' & Response_type == 'Hits' ) %>% 
  arrange( Task, Condition, Timepoints, Subject ) %>% 
  mutate( H = Counts / Trials,
          fH = Counts, 
          Npos = Trials )
tmp = dat %>% 
  filter( Task != 'Combined' & Response_type == 'False_alarms' ) %>% 
  arrange( Task, Condition, Timepoints, Subject ) %>% 
  mutate( FA = Counts / Trials,
          fFA = Counts,
          Nneg = Trials )
all_ptbp$FA = tmp$FA
all_ptbp$fFA = tmp$fFA
all_ptbp$Nneg = tmp$Nneg

# Clean up workspace
rm( tmp )

# Convert the hit/false alarm rates into 
# estimates of d' and bias
all_ptbp = all_ptbp %>% 
  mutate( dp = sdt_calc_binary( fH, Npos, fFA, Nneg, 1, T ),
          crt = sdt_calc_binary( fH, Npos, fFA, Nneg, 1, F ) )

# Standardize BOLD estimates

# Variable names for ROI
roi = c( 'R_DLPFC',
         'L_DLPFC',
         'MPFC',
         'R_VLPFC',
         'L_VLPFC' )

# Flip sign of BOLD estimates
all_ptbp[,roi] = -all_ptbp[,roi]

# Mean and standard deviation over all estimates
BOLD_ds = c(
  m = mean( as.vector( unlist( all_ptbp[,roi] ) ), na.rm = T ),
  sd = sd( as.vector( unlist( all_ptbp[,roi] ) ), na.rm = T )
)

# Standardize estimates
all_ptbp = all_ptbp %>% 
  mutate(
    R_DLPFC = ( R_DLPFC - BOLD_ds[1] )/BOLD_ds[2],
    L_DLPFC = ( L_DLPFC - BOLD_ds[1] )/BOLD_ds[2],
    MPFC = ( MPFC - BOLD_ds[1] )/BOLD_ds[2],
    R_VLPFC = ( R_VLPFC - BOLD_ds[1] )/BOLD_ds[2],
    L_VLPFC = ( L_VLPFC - BOLD_ds[1] )/BOLD_ds[2]
  )

# Add in correct rejections and 
# misses
all_ptbp$CR = 1 - all_ptbp$FA
all_ptbp$fCR = all_ptbp$Nneg - all_ptbp$fFA
all_ptbp$M = 1 - all_ptbp$H
all_ptbp$fM = all_ptbp$Npos - all_ptbp$fH

###
### 2) Boxplots of hits over conditions
###

if ( run_code[1] ) {
  
  # Statistics for boxplots
  ct = all_ptbp %>% 
    group_by( Task, Condition, Timepoints ) %>% 
    summarize( mean_H = mean( H ),
               median_H = median( H ),
               LUI_H = quantile( 
                 simpleBootstrap( H )[[1]], .025 ),
               UUI_H = quantile( 
                 simpleBootstrap( H )[[1]], .975 ),
               LIQR_H = quantile( H, .25 ),
               UIQR_H = quantile( H, .75 ),
               Min_H = min( H ),
               Max_H = max( H ),
               mean_CR = mean( CR ),
               median_CR = median( CR ),
               LUI_CR = quantile( 
                 simpleBootstrap( CR )[[1]], .025 ),
               UUI_CR = quantile( 
                 simpleBootstrap( CR )[[1]], .975 ),
               LIQR_CR = quantile( CR, .25 ),
               UIQR_CR = quantile( CR, .75 ),
               Min_CR = min( CR ),
               Max_CR = max( CR )
    )
  
  # Indicate whether new plotting window should 
  # be generated or if figure should be saved as PDF
  if (!savePlot) x11(width = 12 )
  
  # Plotting characteristics
  lnSz = 2
  lnSz2 = 3
  txtSz = 1.5
  ptSz = 1.25
  axPos = -1.75
  pts = rep( rep( c(22,24), each = 3 ), 4 )
  clr = rep( rep( c( 'black', 'white' ), each = 3 ), 4 )
  
  # Extract elements to plot
  mean_val = numeric(24)
  error_bars = matrix( NA, 2, 24 )
  lbls = matrix( ' ', 4, 2 )
  for ( i in 1:4 ) {
    v1 = 1:3 + 6*(i-1)
    v2 = 4:6 + 6*(i-1)
    v3 = 1:3 + 3*(i-1)
    mean_val[v1] = ct$mean_H[v3]
    mean_val[v2] = ct$mean_CR[v3]
    error_bars[1,v1] = ct$LUI_H[v3]
    error_bars[1,v2] = ct$LUI_CR[v3]
    error_bars[2,v1] = ct$UUI_H[v3]
    error_bars[2,v2] = ct$UUI_CR[v3]
    lbls[i,1] = unique( ct$Condition[v3] )
    lbls[i,2] = unique( ct$Task[v3] )
  }
  lbls[ lbls[,2] == 'NBack_0', 2 ] = '0-back'
  lbls[ lbls[,2] == 'NBack_2', 2 ] = '2-back'
  
  # Create a blank plot
  xl = c( .5, 24.5 ); yl = c( .7, 1 )
  blankPlot( xl, yl )
  
  # Add grid lines
  horizLines( seq( .7, 1, .05 ), xl, col = 'grey80', 
              lwd = lnSz )
  customAxes( xl, yl )
  # Separate task and conditions
  vertLines( c( 6.5, 12.5, 18.5 ), yl, lwd = lnSz )
  
  # Add axis labels
  axis( 3, 24/4 * 1:4 - 2.5, 
        lbls[,1],
        tick = F, line = axPos, cex.axis = txtSz )
  axis( 1, 24/2 * 1:2 - 5.5, 
        unique( lbls[,2] ),
        tick = F, line = axPos, cex.axis = txtSz )
  axis( 2, seq( .7, 1, .1 ),
        seq( .7, 1, .1 ) * 100, 
        tick = F, line = axPos, cex.axis = txtSz )
  mtext( 'Average percentage', side = 2, line = 1.5, cex = txtSz )
  
  # Add plotting elements
  
  errorBars( 1:24, error_bars,
             lwd = lnSz, length = .05 )
  
  # Lines by condition
  for ( i in 1:8 ) {
    v1 = 1:3 + 3*(i-1)
    lines( v1, mean_val[v1], lwd = lnSz )
  }
  
  # Add average percentages
  points( 1:24, mean_val, pch = pts, bg = clr )
  
  # Add labels for timepoints
  text( 1:3, error_bars[1,1:3], c( expression(T[1]),
                expression(T[2]),
                expression(T[3]) ),
        pos = 1, cex = txtSz )
  
  legend( -.5, yl[1] - diff(yl)*.1, 
          c( 'Correct Omissions', 'Hits' ),
          pch = rev( unique( pts ) ), 
          pt.bg = c( 'white', 'black' ),
          bty = 'n', horiz = T, xpd = T, cex = txtSz )
  
  legend( 7.5, yl[1] - diff(yl)*.1, 
          c( 'T1: pre-drug', 'T2: post-drug', 'T3: post-drug (2)' ),
          bty = 'n', horiz = T, xpd = T, cex = txtSz )
  
}


###
### 3) Distributions of d' and criterion estimates
###

if ( run_code[2] ) {
  
  # Measures of central tendency
  ct = all_ptbp %>% 
    group_by( Task, Condition, Timepoints ) %>% 
    summarize( mean_H = mean( H ),
               median_H = median( H ),
               mean_FA = mean( FA ),
               median_FA = median( FA ),
               mean_dp = mean( dp ),
               median_dp = median( dp ),
               mean_crt = mean( crt ),
               median_crt = median( crt ) )
  
  ### d' ###
  
  # Indicate whether new plotting window should 
  # be generated or if figure should be saved as PDF
  if (!savePlot) x11(width = 12 )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  clr = paste( 'grey', c( 80, 70, 60 ), sep = '' )
  clr = rep( clr, 4 )
  
  xl = c( 0, 13 ); yl = c( 0, 5 )
  blankPlot( xl, yl )
  
  horizLines( seq(1,5,1), xl, lwd = lnSz, col = 'grey90',
              lty = 2 )
  
  customAxes( xl, yl )
  
  axis( 2, seq( yl[1], yl[2], 1 ),
        tick = F, line = -1.75, cex.axis = txtSz )
  mtext( "Distributions of d' estimates", 
         side = 2, cex = txtSz, line = 1 )
  
  lbl = rep( '0-back', 12 )
  lbl[ ct$Task == 'NBack_2' ] = '2-back'
  axis( 3, c( 4, 10 ) - .25 - .45,
        lbl[c(3,9)], 
        tick = F, line = -1.75, cex.axis = txtSz )
  lbl = ct$Condition
  axis( 1, c( 2, 5, 8, 11 ) - .45,
        lbl[c( 2, 5, 8, 11 )], 
        tick = F, line = -1.75, cex.axis = txtSz )
  
  for ( i in 1:12 ) {
    
    # Extract density
    dn = all_ptbp %>% 
      filter( Task == ct$Task[i] & 
                Condition == ct$Condition[i] & 
                Timepoints == ct$Timepoints[i] ) %>% 
      select( dp ) %>% unlist %>% densityPoints
    
    dn$y = .5 * dn$y / max( dn$y )
    
    dn$x = c( dn$x[1], dn$x, dn$x[ length( dn$x ) ] )
    dn$y = c( 0, dn$y, 0 )
    
    # Plot density
    polygon( dn$y + i - .45, dn$x, col = clr[i], border = NA )
    
    # Note measures of central tendency
    segments( i - .45, ct$mean_dp[i], 
              i - .45 + .5, ct$mean_dp[i], 
              lwd = lnSz )
    segments( i - .45, ct$median_dp[i], 
              i - .45 + .5, ct$median_dp[i], 
              lwd = lnSz, lty = 2 )
    
  }
  
  # Separate conditions and tasks
  vertLines( c( 4, 7, 10 ) - .25 - .45, yl, lwd = lnSz )
  
  # Legend
  legend( 3, -.5, c('Pre-drug','Peak drug','Recovery'),
          fill = clr[1:3], bty = 'n', xpd = TRUE,
          horiz = T, cex = txtSz )
  
  
  ### Criterion ###
  
  # Indicate whether new plotting window should 
  # be generated or if figure should be saved as PDF
  if (!savePlot) x11(width = 12 )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  clr = paste( 'grey', c( 80, 70, 60 ), sep = '' )
  clr = rep( clr, 4 )
  
  xl = c( 0, 13 ); yl = c( -2, 2 )
  blankPlot( xl, yl )
  
  horizLines( seq(-2,2,.5), xl, lwd = lnSz, col = 'grey90',
              lty = 2 )
  
  customAxes( xl, yl )
  
  axis( 2, seq( yl[1], yl[2], .5 ),
        tick = F, line = -1.75, cex.axis = txtSz*.9 )
  lbl = paste( 'Biased toward     ',
               '    Biased against', sep = '|' )
  mtext( lbl, side = 2, cex = txtSz, line = 1 )
  mtext( 'Distributions of criterion estimates',
         side = 2, cex = txtSz, line = 2.5 )
  
  lbl = rep( '0-back', 12 )
  lbl[ ct$Task == 'NBack_2' ] = '2-back'
  axis( 3, c( 4, 10 ) - .25 - .45,
        lbl[c(3,9)], 
        tick = F, line = -1.75, cex.axis = txtSz )
  lbl = ct$Condition
  axis( 1, c( 2, 5, 8, 11 ) - .45,
        lbl[c( 2, 5, 8, 11 )], 
        tick = F, line = -1.75, cex.axis = txtSz )
  
  for ( i in 1:12 ) {
    
    # Extract density
    dn = all_ptbp %>% 
      filter( Task == ct$Task[i] & 
                Condition == ct$Condition[i] & 
                Timepoints == ct$Timepoints[i] ) %>% 
      select( crt ) %>% unlist %>% densityPoints
    
    dn$y = .5 * dn$y / max( dn$y )
    
    dn$x = c( dn$x[1], dn$x, dn$x[ length( dn$x ) ] )
    dn$y = c( 0, dn$y, 0 )
    
    # Plot density
    polygon( dn$y + i - .45, dn$x, col = clr[i], border = NA )
    
    # Note measures of central tendency
    segments( i - .45, ct$mean_crt[i], 
              i - .45 + .5, ct$mean_crt[i], 
              lwd = lnSz )
    segments( i - .45, ct$median_crt[i], 
              i - .45 + .5, ct$median_crt[i], 
              lwd = lnSz, lty = 2 )
    
  }
  
  # Separate conditions and tasks
  vertLines( c( 4, 7, 10 ) - .25 - .45, yl, lwd = lnSz )
  
  legend( 3, -2.5, c('Pre-drug','Peak drug','Recovery'),
          fill = clr[1:3], bty = 'n', xpd = TRUE,
          horiz = T, cex = txtSz )
  
}

###
### 4) d' versus self-reported highs
###

# 4.1)
get_scatter_data = function( Cond ) {
  # Purpose:
  # A convenience function to extract the 
  # relevant data to create scatter plots 
  # over a desired set of conditions.
  # Arguments:
  # Cond - A list with the desired task, 
  #        condition, and the pre and 
  #        post-drug time points to include.
  # Returns:
  # A data frame with the measurements for the 
  # initial time point and the subsequent time 
  # point for the desired task and condition.
  
  pre = Cond[[3]]
  po = Cond[[4]]
  
  # Extract data to be plotted
  dtbp = all_ptbp %>% 
    filter( Task == Cond[[1]] & 
              Condition == Cond[[2]] & 
              ( Timepoints == pre | 
                  Timepoints == po )
    )
  
  # Find subjects with complete pre-post pairs
  sel0 = dtbp$Timepoints == pre
  sel1 = dtbp$Timepoints == po
  s0 = dtbp$Subject[ sel0 ]
  s1 = dtbp$Subject[ sel1 ]
  
  if ( length( s0 ) > length( s1 ) ) {
    subjects = s0[ s0 %in% s1 ]
  } else {
    subjects = s1[ s1 %in% s0 ]
  }
  
  # Trim out incomplete pairs
  sel = dtbp$Subject %in% subjects
  dtbp = dtbp[ sel, ]
  
  # Sort data by subjects
  dtbp = dtbp %>% 
    arrange( Subject, Timepoints )
  
  # Add convenience variable for pre-post separation
  dtbp$Pre = FALSE
  dtbp$Pre[ dtbp$Timepoints == pre ] = TRUE
  
  # Return data frame with plotting data
  return( dtbp )
}

# 4.2)
quick_scatter = function( cond, 
                          value,
                          yl,
                          yax,
                          y_lbl,
                          l_adj,
                          x_lab,
                          r_adj = .9 ) {
  # Purpose:
  # Generates a scatter plot of d' estimates 
  # versus self-reported highs.
  # Arguments:
  # cond  - A character vector with the desired 
  #         task and the two time points to include
  # value - The variable to plot (e.g., 'dp')
  # yl    - The lower and upper boundaries for 
  #         the y-axis
  # yax   - The lower and upper values of the range, 
  #         along with the increment, for the 
  #         gridlines for the y-axis
  # y_lbl - The y-axis label
  # l_adj - The adjustment for the upper boundary 
  #         of the y-axis at which to report 
  #         the correlation and p-value
  # x_lab - If 'TRUE', includes a label for the x-axis
  # r_adj - The adjustment for the y-axis position 
  #         of the correlation value
  
  # Extract relevant data
  Cond = list( cond[1], 'Placebo', cond[2], cond[3] )
  dat_p = get_scatter_data( Cond )
  Cond = list( cond[1], 'Drug', cond[2], cond[3] )
  dat_d = get_scatter_data( Cond )
  
  # Create a blank plot
  xl = c(-5,105)
  blankPlot( xl, yl )
  
  # Add axis labels
  axis( 1, seq( 0, 100, 20 ),
        tick = F, line = axPos, cex.axis = txtSz * a_adj )
  if ( x_lab ) {
    mtext( 'Self-reported high', side = 1, line = 2,
           cex = txtSz )
  }
  
  axis( 2, seq( yax[1], yax[2], yax[3] ),
        tick = F, line = axPos, cex.axis = txtSz * a_adj )
  mtext( y_lbl, side = 2, line = 1.5,
         cex = txtSz )
  
  # Extract x and y values
  x = c(
    dat_p$Self_report_on_high[ dat_p$Pre == F ],
    dat_d$Self_report_on_high[ dat_d$Pre == F ] )
  y = c(
    dat_p[ dat_p$Pre == F, value ] - 
      dat_p[ dat_p$Pre == T, value ],
    dat_d[ dat_d$Pre == F, value ] - 
      dat_d[ dat_d$Pre == T, value ] )
  clr = c( rep( clr[1], sum( dat_p$Pre ) ),
           rep( clr[2], sum( dat_d$Pre ) ) )
  pts = c( rep( pts[1], sum( dat_p$Pre ) ),
           rep( pts[2], sum( dat_d$Pre ) ) )
  
  # Correlation
  R_tst = cor.test( x, y )
  
  val = paste( 'R = ', round( R_tst$estimate, 2 ),
               ' (p = ', 
               round( R_tst$p.value, 3 ), ')', sep = '' )
  
  legend( 40, yl[2]*l_adj, val, bty = 'n', cex = txtSz * r_adj,
          xpd = TRUE )
  
  # Regression line
  od = data.frame( x = x, y = y )
  rg = lm( y ~ x, data = od )
  nd = data.frame( x = seq(0,100,length=100) )
  pi = predict( rg, nd, interval = 'predict' )
  
  # Prediction interval
  xi = c( nd$x, rev( nd$x ) )
  yi = c( pi[,'lwr'], rev( pi[,'upr'] ) )
  yi[ yi > yl[2] ] = yl[2]
  yi[ yi < yl[1] ] = yl[1]
  polygon( xi, yi, 
           col = 'grey90', border = NA )
  lines( nd$x, pi[,'fit'], lwd = lnSz, lty = 2 )
  
  horizLines( seq( yax[1], yax[2], yax[3] ), xl, 
              col = 'grey80', lwd = lnSz )
  customAxes( xl, yl )
  
  # Add observations
  points( x, y, pch = pts, bg = clr, cex = ptSz )
}

if ( run_code[3] ) {
  
  # Conditions to plot
  tm = sort( unique( dat$Timepoints ) )
  tsk = unique( dat$Task )[-1]
  all_cnd = cbind( rep( tsk, each = 3 ),
                   rep( tm[ c(1,1,2) ], 2 ),
                   rep( tm[ c(2,3,3) ], 2 ) )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.5
  axPos = -1.5
  a_adj = 1
  clr = c( 'white', 'black' )
  pts = c( 24, 21 )
  
  for ( i in 1:nrow( all_cnd ) ) {
    
    if ( i %% 3 == 1 ) {
      # Indicate whether new plotting window should 
      # be generated or if figure should be saved as PDF
      if (!savePlot) x11(width = 12 )
      # Create two plotting planes
      layout( cbind( 1, 2, 3 ) )
    }
    
    if ( i %% 3 == 1 ) 
      y_lbl = "Differences in d'" else y_lbl = ' '
    
    if ( i %% 3 == 2 ) x_lab = T else x_lab = F
    
    # Create scatter plot
    yl = c(-4.5,4.5); yl2 = c(-4,4,1)
    quick_scatter( all_cnd[i,], 'dp',
                   yl,
                   yl2,
                   y_lbl,
                   1.1,
                   x_lab,
                   r_adj = 1.1 )
    
    # Add a title for the type of difference 
    # score
    if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
    if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
    if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
    if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
    mtext( paste( v2, '-', v1 ), side = 3, 
           line = 1.5, cex = txtSz )
    
    # Add additional details regarding the 
    # task and timepoints
    if ( i %% 3 == 1 ) {
      
      if ( all_cnd[i,1] == 'NBack_0' ) {
        tsk = '0-back'
      } else {
        tsk = '2-back'
      }
      
      mtext( tsk, side = 1, adj = 0, cex = txtSz,
             line = 2.5 ); 
    }
    
    # Add legend for placebo versus drug
    if ( i %% 3 == 0 ) {
      
      legend( 0, yl[1] - diff(yl) * .055, 
              c( 'Placebo', 'Drug' ),
              pch = pts, 
              pt.bg = clr, 
              bty = 'n',
              cex = txtSz * 1.3,
              horiz = T,
              xpd = T )
      
    }
    
  }
  
}

###
### 5) Criterion versus self-reported highs
###

if ( run_code[4] ) {
  
  # Conditions to plot
  tm = sort( unique( dat$Timepoints ) )
  tsk = unique( dat$Task )[-1]
  all_cnd = cbind( rep( tsk, each = 3 ),
                   rep( tm[ c(1,1,2) ], 2 ),
                   rep( tm[ c(2,3,3) ], 2 ) )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.5
  axPos = -1.5
  a_adj = 1
  clr = c( 'white', 'black' )
  pts = c( 24, 21 )
  
  for ( i in 1:nrow( all_cnd ) ) {
    
    if ( i %% 3 == 1 ) {
      # Indicate whether new plotting window should 
      # be generated or if figure should be saved as PDF
      if (!savePlot) x11(width = 12 )
      # Create two plotting planes
      layout( cbind( 1, 2, 3 ) )
    }
    
    if ( i %% 3 == 1 ) 
      y_lbl = "Differences in bias" else y_lbl = ' '
      
      if ( i %% 3 == 2 ) x_lab = T else x_lab = F
      
      # Create scatter plot
      yl = c(-2.05,2.05); yl2 = c(-2,2,.5)
      quick_scatter( all_cnd[i,], 'crt',
                     yl,
                     yl2,
                     y_lbl,
                     1.125,
                     x_lab,
                     r_adj = 1.1 )
      
      # Add a title for the type of difference 
      # score
      if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
      if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
      if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
      if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
      mtext( paste( v2, '-', v1 ), side = 3, 
             line = 1.5, cex = txtSz )
      
      # Add additional details regarding the 
      # task and timepoints
      if ( i %% 3 == 1 ) {
        
        if ( all_cnd[i,1] == 'NBack_0' ) {
          tsk = '0-back'
        } else {
          tsk = '2-back'
        }
        
        mtext( tsk, side = 1, adj = 0, cex = txtSz,
               line = 2.5 ); 
      }
      
      # Add legend for placebo versus drug
      if ( i %% 3 == 0 ) {
        
        legend( 0, yl[1] - diff(yl) * .055, 
                c( 'Placebo', 'Drug' ),
                pch = pts, 
                pt.bg = clr, 
                bty = 'n',
                cex = txtSz * 1.3,
                horiz = T,
                xpd = T )
        
      }
      
  }
  
}

###
### 6) Hits versus self-reported highs
###

if ( run_code[5] ) {
  
  # Conditions to plot
  tm = sort( unique( dat$Timepoints ) )
  tsk = unique( dat$Task )[-1]
  all_cnd = cbind( rep( tsk, each = 3 ),
                   rep( tm[ c(1,1,2) ], 2 ),
                   rep( tm[ c(2,3,3) ], 2 ) )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.5
  axPos = -1.5
  a_adj = 1
  clr = c( 'white', 'black' )
  pts = c( 24, 21 )
  
  for ( i in 1:nrow( all_cnd ) ) {
    
    if ( i %% 3 == 1 ) {
      # Indicate whether new plotting window should 
      # be generated or if figure should be saved as PDF
      if (!savePlot) x11(width = 12 )
      # Create two plotting planes
      layout( cbind( 1, 2, 3 ) )
    }
    
    if ( i %% 3 == 1 ) 
      y_lbl = "Differences in d'" else y_lbl = ' '
      
      if ( i %% 3 == 2 ) x_lab = T else x_lab = F
      
      # Create scatter plot
      yl = c(-.9,.5); yl2 = c(-.8,.4,.2)
      quick_scatter( all_cnd[i,], 'H',
                     yl,
                     yl2,
                     y_lbl,
                     1.15,
                     x_lab,
                     r_adj = 1.1 )
      
      # Add a title for the type of difference 
      # score
      if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
      if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
      if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
      if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
      mtext( paste( v2, '-', v1 ), side = 3, 
             line = 1.5, cex = txtSz )
      
      # Add additional details regarding the 
      # task and timepoints
      if ( i %% 3 == 1 ) {
        
        if ( all_cnd[i,1] == 'NBack_0' ) {
          tsk = '0-back'
        } else {
          tsk = '2-back'
        }
        
        mtext( tsk, side = 1, adj = 0, cex = txtSz,
               line = 2.5 ); 
      }
      
      # Add legend for placebo versus drug
      if ( i %% 3 == 0 ) {
        
        legend( 0, yl[1] - diff(yl) * .055, 
                c( 'Placebo', 'Drug' ),
                pch = pts, 
                pt.bg = clr, 
                bty = 'n',
                cex = txtSz * 1.3,
                horiz = T,
                xpd = T )
        
      }
      
  }
  
}

###
### 7) BOLD estimates versus self-reported highs
###

if ( run_code[6] ) {
  
  # Extract plotting dimensions
  b("
    for ( vn in roi ) {
    print( lowerUpper( 1, 
    all_ptbp[ !is.na( all_ptbp[,vn] ), vn ] ) )
    }
    ")
  
  plt_dm = list(
    c( -4, 4, 1 ),
    c( -4, 4, 1 ),
    c( -4, 4, 1 ),
    c( -4, 4, 1 ),
    c( -4, 4, 1 ) )
  
  ROI_labels = c(
    'R. DLPFC',
    'L. DLPFC',
    'MPFC',
    'R. VLPFC',
    'L. VLPFC' )
  
  # Loop over ROI
  for ( j in 1:5 ) {
    
    # Conditions to plot
    tm = sort( unique( dat$Timepoints ) )
    tsk = unique( dat$Task )[3]
    all_cnd = cbind( rep( tsk, each = 3 ),
                     tm[ c(1,1,2) ],
                     tm[ c(2,3,3) ] )
    
    # Plotting characteristics
    lnSz = 2
    txtSz = 1.5
    ptSz = 1.5
    axPos = -1.5
    a_adj = 1
    clr = c( 'white', 'black' )
    pts = c( 24, 21 )
    
    for ( i in 1:nrow( all_cnd ) ) {
      
      if ( i %% 3 == 1 ) {
        # Indicate whether new plotting window should 
        # be generated or if figure should be saved as PDF
        if (!savePlot) x11(width = 12 )
        # Create two plotting planes
        layout( cbind( 1, 2, 3 ) )
      }
      
      if ( i %% 3 == 1 ) {
        y_lbl = paste( "HbO differences (",
                       ROI_labels[j], ")", sep = "" ) 
      } else y_lbl = ' '
        
        if ( i %% 3 == 2 ) x_lab = T else x_lab = F
        
        # Create scatter plot
        yl = plt_dm[[j]][1:2]; yl2 = plt_dm[[j]]
        quick_scatter( all_cnd[i,], roi[j],
                       yl,
                       yl2,
                       y_lbl,
                       1.15,
                       x_lab,
                       r_adj = 1.1 )
        
        # Add a title for the type of difference 
        # score
        if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
        if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
        if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
        if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
        mtext( paste( v2, '-', v1 ), side = 3, 
               line = 1.5, cex = txtSz )
        
        # Add additional details regarding the 
        # task and timepoints
        if ( i %% 3 == 1 ) {
          
          if ( all_cnd[i,1] == 'NBack_0' ) {
            tsk = '0-back'
          } else {
            tsk = '2-back'
          }
          
          mtext( tsk, side = 1, adj = 0, cex = txtSz,
                 line = 2.5 ); 
        }
        
        # Add legend for placebo versus drug
        if ( i %% 3 == 0 ) {
          
          legend( 0, yl[1] - diff(yl) * .055, 
                  c( 'Placebo', 'Drug' ),
                  pch = pts, 
                  pt.bg = clr, 
                  bty = 'n',
                  cex = txtSz * 1.3,
                  horiz = T,
                  xpd = T )
          
        }
        
    }
    
  }
  
}


###
### 8) Dosage versus self-reported highs
###

if ( run_code[7] ) {
  
  # Conditions to plot
  tm = sort( unique( dat$Timepoints ) )
  tsk = unique( dat$Task )[-1]
  all_cnd = cbind( rep( tsk[1], each = 2 ),
                   tm[ c(1,1) ],
                   tm[ c(2,3) ] )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.5
  axPos = -1.5
  a_adj = 1
  clr = c( 'white', 'black' )
  pts = c( 24, 21 )
  
  for ( i in 1:nrow( all_cnd ) ) {
    
    if ( i %% 3 == 1 ) {
      # Indicate whether new plotting window should 
      # be generated or if figure should be saved as PDF
      if (!savePlot) x11(width = 12 )
      # Create two plotting planes
      layout( cbind( 1, 2 ) )
    }
    
    if ( i %% 3 == 1 ) 
      y_lbl = "Differences in dosage" else y_lbl = ' '
      
      x_lab = T
      
      # Create scatter plot
      yl = c(-5,65); yl2 = c(0,60,10)
      quick_scatter( all_cnd[i,], 'Dosage',
                     yl,
                     yl2,
                     y_lbl,
                     1.125,
                     x_lab,
                     r_adj = 1 )
      
      # Add a title for the type of difference 
      # score
      if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
      if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
      if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
      if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
      mtext( paste( v2, '-', v1 ), side = 3, 
             line = 1.5, cex = txtSz )
      
      # Add legend for placebo versus drug
      if ( i %% 3 == 0 ) {
        
        legend( 0, yl[1] - diff(yl) * .055, 
                c( 'Placebo', 'Drug' ),
                pch = pts, 
                pt.bg = clr, 
                bty = 'n',
                cex = txtSz * 1.3,
                horiz = T,
                xpd = T )
        
      }
      
  }
  
}

###
### 9) d' versus dosage
###

# 9.1)
quick_scatter_dosage = function( cond, 
                                 value,
                                 yl,
                                 yax,
                                 y_lbl,
                                 l_adj ) {
  # Purpose:
  # Generates a scatter plot of estimates 
  # versus THC dosage amounts.
  # Arguments:
  # cond  - A vector with the desired task, 
  #         condition, and post-drug 
  #         time point to include
  # value - The variable to plot (e.g., 'dp')
  # yl    - The lower and upper boundaries for 
  #         the y-axis
  # yax   - The lower and upper values of the range, 
  #         along with the increment, for the 
  #         gridlines for the y-axis
  # y_lbl - The y-axis label
  # l_adj - The adjustment for the upper boundary 
  #         of the y-axis at which to report 
  #         the correlation and p-value
  
  # Extract relevant data
  dtbp = all_ptbp %>% 
    filter( Task == cond[1] & 
              Condition == cond[2] & 
              Timepoints == cond[3] )
  
  # Create a blank plot
  xl = c(-5,85)
  blankPlot( xl, yl )
  
  # Add axis labels
  axis( 1, seq( 0, 80, 20 ),
        tick = F, line = -1.75, cex.axis = txtSz )
  mtext( 'Dosage amount', side = 1, line = 1,
         cex = txtSz )
  
  axis( 2, seq( yax[1], yax[2], yax[3] ),
        tick = F, line = -1.75, cex.axis = txtSz*.9 )
  mtext( y_lbl, side = 2, line = 1.5,
         cex = txtSz )
  
  # Extract x and y values
  y = dtbp[,value]
  x = dtbp$Dosage
  
  # Correlation
  R_tst = cor.test( x, y )
  
  val = paste( 'R = ', round( R_tst$estimate, 2 ),
               ' (p = ', 
               round( R_tst$p.value, 3 ), ')', sep = '' )
  
  legend( 30, yl[2]*l_adj, val, bty = 'n', cex = txtSz * .9,
          xpd = TRUE )
  
  # Regression line
  od = data.frame( x = x, y = y )
  rg = lm( y ~ x, data = od )
  nd = data.frame( x = seq(0,100,length=100) )
  pi = predict( rg, nd, interval = 'predict' )
  
  # Prediction interval
  xi = c( nd$x, rev( nd$x ) )
  yi = c( pi[,'lwr'], rev( pi[,'upr'] ) )
  yi[ yi > yl[2] ] = yl[2]
  yi[ yi < yl[1] ] = yl[1]
  polygon( xi, yi, 
           col = 'grey90', border = NA )
  lines( nd$x, pi[,'fit'], lwd = lnSz, lty = 2 )
  
  horizLines( seq( yax[1], yax[2], yax[3] ), xl, 
              col = 'grey80', lwd = lnSz )
  customAxes( xl, yl )
  
  # Add observations
  points( x, y, pch = 21, bg = 'black', cex = ptSz )
}


if ( run_code[8] ) {
  
  # Conditions to plot
  all_cnd = rbind(
    c( 'NBack_0', 'Drug', 'T2_Post_drug' ),
    c( 'NBack_0', 'Drug', 'T3_Post_drug' ),
    c( 'NBack_2', 'Drug', 'T2_Post_drug' ),
    c( 'NBack_2', 'Drug', 'T3_Post_drug' ) )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.25
  
  for ( i in 1:nrow( all_cnd ) ) {
    
    if ( i %% 2 == 1 ) {
      # Indicate whether new plotting window should 
      # be generated or if figure should be saved as PDF
      if (!savePlot) x11(width = 12 )
      # Create two plotting planes
      layout( cbind( 1, 2 ) )
    }
    
    # Create input for custom scatter plot function
    cond = c( all_cnd[i,1],
              all_cnd[i,2],
              all_cnd[i,3] )
    
    # Create scatter plot
    quick_scatter_dosage( cond, 'dp',
                          c(0,6),
                          c(0,6,1),
                          "d' estimates",
                          1.1 )
    
    # Add a title for the task and 
    # timepoint
    if ( all_cnd[i,1] == 'NBack_0' ) 
      tsk = '0-back' else tsk = '2-back'
    if ( all_cnd[i,3] == 'T2_Post_drug' )
      tm = '(Time 2)' else tm = '(Time 3)'
    
    title( paste( tsk, tm ), cex = txtSz )
    
  }
  
}

###
### 10) Overall fNIRS BOLD response by conditions
###

if ( run_code[9] ) {
  
  # Standardize BOLD estimates
  BOLD = neurDat %>% 
    select( ID, Subject, Condition, Timepoints, 
            R_DLPFC, L_DLPFC, MPFC, R_VLPFC, L_VLPFC )
  
  # Variable names for ROI
  roi = c( 'R_DLPFC',
           'L_DLPFC',
           'MPFC',
           'R_VLPFC',
           'L_VLPFC' )
  
  # Mean and standard deviation over all estimates
  BOLD_ds = c(
    m = mean( as.vector( unlist( BOLD[,roi] ) ), na.rm = T ),
    sd = sd( as.vector( unlist( BOLD[,roi] ) ), na.rm = T )
  )
  
  BOLD = BOLD %>% 
    mutate( R_DLPFC = (R_DLPFC - BOLD_ds[1])/BOLD_ds[2],
            L_DLPFC = (L_DLPFC - BOLD_ds[1])/BOLD_ds[2],
            MPFC = (MPFC - BOLD_ds[1])/BOLD_ds[2],
            R_VLPFC = (R_VLPFC - BOLD_ds[1])/BOLD_ds[2],
            L_VLPFC = (L_VLPFC - BOLD_ds[1])/BOLD_ds[2] )
  
  # Compute descriptive stats for each ROI
  qb = function( x, q ) {
    bs = simpleBootstrap(x)[[1]]
    out = quantile( bs, prob = q )
    return( out )
  }
  qeb = function( x, q ) {
    se = sem(x)
    n = length(x)
    m = mean(x)
    out = m + qt( q, df = n - 1 ) * se
    return( out )
  }
  
  roi = grep( 'PFC',colnames(BOLD) )
  cnd = list( BOLD$Timepoints, BOLD$Condition )
  ct = list(
    # Means
    b_m = apply( BOLD[,roi],
                 2, function(x) 
                   aggregate( x, cnd, mean )$x ),
    # Standard uncertainty interval
    b_sel = apply( BOLD[,roi],
                   2, function(x) 
                     aggregate( x, cnd, qeb, q = .025 )$x ),
    b_seu = apply( BOLD[,roi],
                   2, function(x) 
                     aggregate( x, cnd, qeb, q = .975 )$x ),
    # Boostrapped uncertainty intervals
    b_lui = apply( BOLD[,roi],
                   2, function(x) 
                     aggregate( x, cnd, qb, q = .025 )$x ),
    b_uui = apply( BOLD[,roi],
                   2, function(x) 
                     aggregate( x, cnd, qb, q = .975 )$x )
  )
  
  # Indicate whether new plotting window should 
  # be generated or if figure should be saved as PDF
  if (!savePlot) x11(width = 12 )
  
  lyt = rbind( c( rep( 1, 5 ), 2 ) )
  layout( lyt )
  
  # Plotting characteristics
  lnSz = 2
  lnSz2 = 3
  txtSz = 2
  ptSz = 1.25
  axPos = -1.75
  pts = rep( c(22,24,25), 2 )
  clr = rep( c( 'black', 'white' ), each = 3 )
  
  # Create a blank plot
  xl = c( 0, 7 ); yl = c(-2,2)
  blankPlot( xl, yl )
  
  shft = seq( -.3,.3,length=5)
  
  # Add grid lines
  horizLines( seq( yl[1], yl[2], .5 ), xl, col = 'grey80', 
              lwd = lnSz )
  customAxes( xl, yl )
  
  # Add axis labels
  axis( 2, seq( yl[1], yl[2], .5 ), 
        tick = F, line = axPos, cex.axis = txtSz )
  mtext( 'BOLD response (Standardized)', 
         side = 2, line = 1.5, cex = txtSz * .8 )
  
  for ( i in 1:5 ) {
    # Bootstrapped uncertainty bars
    #segments( 1:6 + shft[i], ct$b_lui[,i], 
    #          1:6 + shft[i], ct$b_uui[,i], lwd = lnSz )
    # Standard uncertainty intervals
    errorBars( 1:6 + shft[i], 
               rbind( ct$b_sel[,i], ct$b_seu[,i] ),
               lwd = lnSz, length = .05 )
    # Means
    points( 1:6 + shft[i], ct$b_m[,i],
            pch = pts, cex = ptSz, bg = clr )
  }
  
  # Labels for ROI
  text( 1 + shft, ct$b_seu[1,] * 1.025, as.character( 1:5 ),
        cex = txtSz * .8, pos = 3 )
  
  
  # Extract condition labels
  lbls = aggregate( BOLD$R_DLPFC, cnd, mean )
  lbls$x = NULL
  colnames( lbls ) = c( 'Timepoints', 'Condition' )
  
  # Add legends
  sel = c( 1,4)
  legend( 2.85, yl[2] * 1.25, lbls$Condition[sel],
          pch = 22, pt.bg = clr[sel],
          bty = 'n', cex = txtSz, xpd = T,
          horiz = T )
  
  lbls2 = rep( 'Pre drug', 6 )
  lbls2[ lbls$Timepoints == 'T2_Post_drug' ] = 'Peak drug'
  lbls2[ lbls$Timepoints == 'T3_Post_drug' ] = 'Recovery'
  
  sel = 1:3
  legend( 0, yl[1] - diff(yl)*.08, lbls2[sel],
          pch = pts[sel], pt.bg = 'black',
          bty = 'n', cex = txtSz, xpd = T,
          horiz = T )
  
  par( mar = c( 0, 0, 0, 0 ) )
  blankPlot()
  
  legend( 'left',
          paste( 1:5, c( 'R. DLPFC', 'L. DLPFC', 
                         'MPFC', 
                         'R. VLPFC', 'L. VLPFC' ), sep = ' - ' ), 
          bty = 'n', cex = txtSz )
  
  # Reset plotting dimensions
  par( mar = c( 3, 5, 1, .5 ) )
  layout( cbind(1) )
  
}

###
### 11) d' differences versus BOLD differences
###

# 11.1)
quick_scatter_fNIRS = function( cond, 
                                roi,
                                value,
                                yl,
                                yax,
                                y_lbl,
                                l_adj,
                                x_lab,
                                r_adj = .9 ) {
  # Purpose:
  # Generates a scatter plot of estimates 
  # versus fNIRS BOLD responses for different ROI.
  # Arguments:
  # cond  - A list with the desired task, 
  #         condition, and post-drug 
  #         time point to include
  # roi   - The ROI BOLD estimates to plot
  # value - The y-axis variable to plot (e.g., 'dp')
  # yl    - The lower and upper boundaries for 
  #         the y-axis
  # yax   - The lower and upper values of the range, 
  #         along with the increment, for the 
  #         gridlines for the y-axis
  # y_lbl - The y-axis label
  # l_adj - The adjustment for the upper boundary 
  #         of the y-axis at which to report 
  #         the correlation and p-value
  # x_lab - 
  # r_adj - 
  
  # Specify dimensions to use for x-axis values
  x_dim = list(
    c( -5, 5, 2 ),
    c( -5, 5, 2 ),
    c( -5, 5, 2 ),
    c( -5, 5, 2 ),
    c( -5, 5, 2 ) )
  
  ROI = c( 'R_DLPFC',
           'L_DLPFC',
           'MPFC',
           'R_VLPFC',
           'L_VLPFC' )
  
  ROI_labels = c( '(R. DLPFC)',
                  '(L. DLPFC)',
                  '(MPFC)',
                  '(R. VLPFC)',
                  '(L. VLPFC)' )
  roi_sel = which( ROI == roi )
  
  # Extract relevant data
  Cond = list( cond[1], 'Placebo', cond[2], cond[3] )
  dat_p = get_scatter_data( Cond )
  Cond = list( cond[1], 'Drug', cond[2], cond[3] )
  dat_d = get_scatter_data( Cond )
  
  # Extract x and y values
  x = c(
    dat_p[ dat_p$Pre == F, roi ] - 
      dat_p[ dat_p$Pre == T, roi ],
    dat_d[ dat_d$Pre == F, roi ] - 
      dat_d[ dat_d$Pre == T, roi ] )
  y = c(
    dat_p[ dat_p$Pre == F, value ] - 
      dat_p[ dat_p$Pre == T, value ],
    dat_d[ dat_d$Pre == F, value ] - 
      dat_d[ dat_d$Pre == T, value ] )
  clr = c( rep( clr[1], sum( dat_p$Pre ) ),
           rep( clr[2], sum( dat_d$Pre ) ) )
  pts = c( rep( pts[1], sum( dat_p$Pre ) ),
           rep( pts[2], sum( dat_d$Pre ) ) )
  
  # Create a blank plot
  xl = x_dim[[ roi_sel ]][1:2]
  blankPlot( xl, yl )
  
  # Add axis labels
  axis( 1, seq( xl[1], xl[2], x_dim[[ roi_sel ]][3] ),
        tick = F, line = -1.75, cex.axis = txtSz )
  if ( x_lab ) {
    mtext( paste( 'HbO differences', ROI_labels[ roi_sel ] ), 
           side = 1, line = 1.5, cex = txtSz )
  }
  
  axis( 2, seq( yax[1], yax[2], yax[3] ),
        tick = F, line = -1.75, cex.axis = txtSz*.9 )
  mtext( y_lbl, side = 2, line = 1.5,
         cex = txtSz )
  
  # Correlation
  R_tst = cor.test( x, y )
  
  val = paste( 'R = ', round( R_tst$estimate, 2 ),
               ' (p = ', 
               round( R_tst$p.value, 3 ), ')', sep = '' )
  
  legend( xl[1] + diff(xl) * .4, 
          yl[2]*l_adj, val, bty = 'n', cex = txtSz * r_adj,
          xpd = TRUE )
  
  # Regression line
  od = data.frame( x = x, y = y )
  rg = lm( y ~ x, data = od )
  nd = data.frame( x = seq(xl[1],xl[2],length=100) )
  pi = predict( rg, nd, interval = 'predict' )
  
  # Prediction interval
  xi = c( nd$x, rev( nd$x ) )
  yi = c( pi[,'lwr'], rev( pi[,'upr'] ) )
  yi[ yi > yl[2] ] = yl[2]
  yi[ yi < yl[1] ] = yl[1]
  polygon( xi, yi, 
           col = 'grey90', border = NA )
  lines( nd$x, pi[,'fit'], lwd = lnSz, lty = 2 )
  
  horizLines( seq( yax[1], yax[2], yax[3] ), xl, 
              col = 'grey80', lwd = lnSz )
  customAxes( xl, yl )
  
  # Add observations
  points( x, y, pch = pts, bg = clr, cex = ptSz )
}

if ( run_code[10] ) {
  
  # Conditions to plot
  tm = sort( unique( dat$Timepoints ) )
  tsk = unique( dat$Task )[3]
  all_cnd = cbind( rep( tsk, each = 3 ),
                   tm[ c(1,1,2) ],
                   tm[ c(2,3,3) ] )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.25
  clr = c( 'white', 'black' )
  pts = c( 24, 21 )
  
  ROI = c( 'R_DLPFC',
           'L_DLPFC',
           'MPFC',
           'R_VLPFC',
           'L_VLPFC' )
  
  for ( j in 1:5 ) {
    
    for ( i in 1:nrow( all_cnd ) ) {
      
      if ( i %% 3 == 1 ) {
        # Indicate whether new plotting window should 
        # be generated or if figure should be saved as PDF
        if (!savePlot) x11(width = 12 )
        # Create two plotting planes
        layout( cbind( 1, 2, 3 ) )
      }
      
      # Create input for custom scatter plot function
      cond = list( all_cnd[i,1],
                   all_cnd[i,2],
                   all_cnd[i,3] )
      
      if ( i %% 3 == 1 ) 
        y_lbl = "Differences in d'" else y_lbl = ' '
      
      if ( i %% 3 == 2 ) x_lab = T else x_lab = F
      
      # Create scatter plot
      yl = c(-3.2,3.2); yl2 = c(-3,3,1)
      quick_scatter_fNIRS( cond, ROI[j], 'dp',
                           yl,
                           yl2,
                           y_lbl,
                           1.15,
                           x_lab,
                           r_adj = 1.1 )
      
      # Add a title for the type of difference 
      # score
      if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
      if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
      if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
      if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
      mtext( paste( v2, '-', v1 ), side = 3, 
             line = 1.5, cex = txtSz )
      
      # Add additional details regarding the 
      # task and timepoints
      if ( i %% 3 == 1 ) {
        
        if ( all_cnd[i,1] == 'NBack_0' ) {
          tsk = '0-back'
        } else {
          tsk = '2-back'
        }
        
        mtext( tsk, side = 1, adj = 0, cex = txtSz,
               line = 2.5 ); 
      }
      
      # Add legend for placebo versus drug
      if ( i %% 3 == 0 ) {
        
        legend( -3, yl[1] - diff(yl) * .055, 
                c( 'Placebo', 'Drug' ),
                pch = pts, 
                pt.bg = clr, 
                bty = 'n',
                cex = txtSz * 1.3,
                horiz = T,
                xpd = T )
        
      }
      
      
      
    }
    
  }
  
}

###
### 12) BOLD differences versus hit rates/correct rejections
###

if ( run_code[11] ) {
  
  # Conditions to plot
  tm = sort( unique( dat$Timepoints ) )
  tsk = unique( dat$Task )[3]
  all_cnd = cbind( rep( tsk, each = 3 ),
                   tm[ c(1,1,2) ],
                   tm[ c(2,3,3) ] )
  
  # Plotting characteristics
  lnSz = 2
  txtSz = 1.5
  ptSz = 1.25
  clr = c( 'white', 'black' )
  pts = c( 24, 21 )
  
  ROI = c( 'R_DLPFC',
           'L_DLPFC',
           'MPFC',
           'R_VLPFC',
           'L_VLPFC' )
  
  vrb = c( 'H', 'CR' )
  for ( k in 1:2 ) {
    
    for ( j in 1:5 ) {
      
      for ( i in 1:nrow( all_cnd ) ) {
        
        if ( i %% 3 == 1 ) {
          # Indicate whether new plotting window should 
          # be generated or if figure should be saved as PDF
          if (!savePlot) x11(width = 12 )
          # Create two plotting planes
          layout( cbind( 1, 2, 3 ) )
        }
        
        # Create input for custom scatter plot function
        cond = list( all_cnd[i,1],
                     all_cnd[i,2],
                     all_cnd[i,3] )
        
        if ( i %% 3 == 1 ) {
          if ( vrb[k] == 'H' ) 
            y_lbl = "Hit rate differences"
          if ( vrb[k] == 'CR' ) 
            y_lbl = "Correct omission differences"
        } else y_lbl = ' '
        
        if ( i %% 3 == 2 ) x_lab = T else x_lab = F
        
        # Create scatter plot
        yl = c(-.9,.4); yl2 = c(-.8,.4,.2)
        quick_scatter_fNIRS( cond, ROI[j], vrb[k],
                             yl,
                             yl2,
                             y_lbl,
                             1.2,
                             x_lab,
                             r_adj = 1.1 )
        
        # Add a title for the type of difference 
        # score
        if ( all_cnd[i,2] == tm[1] ) v1 = 'PRE'
        if ( all_cnd[i,2] == tm[2] ) v1 = 'POST'
        if ( all_cnd[i,3] == tm[2] ) v2 = 'POST'
        if ( all_cnd[i,3] == tm[3] ) v2 = 'POST 2'
        mtext( paste( v2, '-', v1 ), side = 3, 
               line = 1.5, cex = txtSz )
        
        # Add additional details regarding the 
        # task and timepoints
        if ( i %% 3 == 1 ) {
          
          if ( all_cnd[i,1] == 'NBack_0' ) {
            tsk = '0-back'
          } else {
            tsk = '2-back'
          }
          
          mtext( tsk, side = 1, adj = 0, cex = txtSz,
                 line = 2.5 ); 
        }
        
        # Add legend for placebo versus drug
        if ( i %% 3 == 0 ) {
          
          legend( -3, yl[1] - diff(yl) * .055, 
                  c( 'Placebo', 'Drug' ),
                  pch = pts, 
                  pt.bg = clr, 
                  bty = 'n',
                  cex = txtSz * 1.3,
                  horiz = T,
                  xpd = T )
          
        }
        
        
        
      }
      
    }
    
  }
  
}

# If desired, save plots as a PDF
if ( savePlot ) dev.off()
setwd( orig_dir )
