blm = function( formula, 
                data, 
                priors = NULL,
                standardize = F ) {
  
  # Initialize output
  out = list( NULL )
  
  # Extract regression formula
  # (i.e., dependent variable and 
  # matrix of predictors)
  cl <- match.call()
  mf <- match.call(expand.dots = FALSE)
  m <- match( c( "formula", "data" ), names(mf), 0L)
  mf <- mf[c(1L, m)]
  mf$drop.unused.levels <- TRUE
  mf[[1L]] <- quote(stats::model.frame)
  mf <- eval(mf, parent.frame())
  mt <- attr(mf, "terms")
  
  # Extract values for dependent variable
  y <- model.response(mf, "numeric")
  
  if (is.empty.model(mt)) {
    
  } else {
    
    # Extract design matrix
    X <- model.matrix(mt, mf, contrasts)
    # Convert dependent variable to column vector
    y = as.matrix( y )
    # Sample size
    n = nrow( y )
    
    # If no priors are provided, use 
    # default priors on standardized coefficients
    if ( is.null( priors ) ) {
      
      standardize = T
      
      priors = list(
        mu_0 = rep( 0, ncol(X) ),
        Lambda_0 = diag( ncol( X ) ),
        a_0 = 1,
        b_0 = 1
      )
      
      # If intercept term is provided, use 
      # empirical Bayes priors
      sel = grepl( '(Intercept)', colnames( X ) )
      if (any(sel)) {
        priors$mu_0[sel] = mean( y )
        priors$Lambda_0[which(sel),which(sel)] = var( y )
      }
      
    }
    
    # If specified, standardize predictors
    if ( standardize ) {
      for ( nc in 1:ncol(X) ) {
        if ( !all( X[,nc] == 1 ) ) {
          X[,nc] = ( X[,nc] - mean( X[,nc] ) )/sd( X[,nc] )
        }
      }
    }
    
    # Extract prior information
    mu_0 = priors[[1]]
    Lambda_0 = priors[[2]]
    a_0 = priors[[3]]
    b_0 = priors[[4]]
    
    # Update prior parameters based on current data
    
    # Posterior precision matrix for coefficients
    tXX = t( X ) %*% X
    Lambda_n = tXX + Lambda_0
    # New covariance matrix
    Sigma_n = solve( Lambda_n )
    
    # Posterior means for coefficients
    mu_n = solve( Lambda_n ) %*% ( Lambda_0 %*% mu_0 + t(X) %*% y )
    
    # Posterior shape parameter
    a_n = a_0 + n/2
    # Posterior scale parameter
    b_n = ( t(y) %*% y ) + ( t(mu_0) %*% Lambda_0 %*% mu_0 )
    b_n = b_n - ( t( mu_n ) %*% Lambda_n %*% mu_n )
    b_n = b_0 + .5*b_n
    
    out = list(
      coefficients = mu_n,
      posterior = list(
        mu_n = mu_n,
        Lambda_n = Lambda_n,
        Sigma_n = Sigma_n,
        a_n = a_n,
        b_n = b_n
      ),
      data = data
    )
    
  }
  
  return( out )
}