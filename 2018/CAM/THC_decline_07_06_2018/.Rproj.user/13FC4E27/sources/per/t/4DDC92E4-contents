# Convert .csv to .RData
# Written by Kevin Potter
# email: kevin.w.potter@gmail.com
# Please email me directly if you 
# have any questions or comments
# Last updated 2018-10-16

# Table of contents
# 1) Initial setup
# 2) Read in raw data
# 3) Convert to data frame for analyses
#   3.1) quick_proprogate
#   3.2) Extract variables of interest
#     3.2.1) Subject details
#     3.2.2) Measures of drug use
#     3.2.3) Primary variables of interest
#     3.2.4) Data issues
#     3.2.5) Create a subject index
# 4) Extract CUDIT and CWS scores
# 5) Save results

###
### 1) Initial setup
###

source( 'S01_Folder_paths.R' )

# Load in useful packages

# Collection of useful functions
my_package_load( 'utilityf', github = T )

# Packages for manipulating data frames
my_package_load( 'dplyr' )

###
### 2) Read in raw data
###

setwd( dat_dir )
setwd( 'Original_files' )

# Read in .csv file
raw_dat = read.csv( 
  file = 'CombinedTHC_10.14.18.csv',
  header = T,
  stringsAsFactors = FALSE )

# 2.1) Fix data entry issues

sel = raw_dat$id == '10053' & raw_dat$visit_number == 3
# Original incorrect values
# date = 6/9/16
# days_since_baseline = 1
# Corrected values
raw_dat$date[sel] = "6/10/2016"
raw_dat$days_since_baseline[sel] = 2

sel = raw_dat$id == '10051' & raw_dat$visit_number == 1
# Original incorrect values
# date = 4/28/16
# Corrected values
raw_dat$date[sel] = "4/27/16"

sel = raw_dat$id == '10051' & raw_dat$visit_number == 2
# Original incorrect values
# days_since_baseline = 0
# Corrected values
raw_dat$days_since_baseline[sel] = 1

sel = raw_dat$id == '10051' & raw_dat$visit_number == 3
# Original incorrect values
# days_since_baseline = 1
# Corrected values
raw_dat$days_since_baseline[sel] = 2

###
### 3) Convert to data frame for analyses
###

# 3.1)
quick_proprogate = function( vrb ) {
  # Purpose:
  # Function to proprogate singular values for a 
  # given subject over repeated measures.
  # Arguments:
  # vrb - Character string for variable of interest 
  #       in 'raw_dat'
  # Returns:
  # A vector with the repeated values for each subject.
  
  # Isolate subjects
  subj = unique( all_dat$ID )
  
  # Initialize output
  sel = all_dat$ID == subj[1]
  x = raw_dat[sel,vrb]
  no_na = !is.na( x )
  out = rep( x[no_na], nrow( all_dat ) )
  
  # Loop over remaining subjects
  for ( s in 2:length( subj ) ) {
    
    sel = all_dat$ID == subj[s]
    x = raw_dat[sel,vrb]
    no_na = !is.na( x )
    if ( any( no_na ) ) {
      out[sel] = x[no_na]
    } else {
      out[sel] = NA
    }
    
  }
  
  return( out )
}

# 3.2) Extract variables of interest

# Initialize data frame
all_dat = data.frame(
  ID = raw_dat$id,
  stringsAsFactors = F
)

# 3.2.1) Subject details

# Sex
all_dat$Sex = quick_proprogate( 'sex_conf' )
# Convert to effects coding
all_dat$Sex[ all_dat$Sex == 1 ] = -1
all_dat$Sex[ all_dat$Sex == 2 ] = 1
attributes( all_dat$Sex ) = list(
  Coding = data.frame(
    Sex = c( 'Male', 'Female' ),
    Value = c(-1,1),
    stringsAsFactors = F ) )

# Age
all_dat$Age = quick_proprogate( 'age_exact' )
attributes( all_dat$Age ) = list(
  Units = 'Years'
)

# Body mass index
all_dat$BMI = quick_proprogate( 'bmi' )
attributes( all_dat$BMI ) = list(
  Units = 'Kilograms/Meters^2'
)

# Race (White versus non-white)
all_dat$Race = quick_proprogate( 'race_revised' )
# Convert to effects coding
all_dat$Race[ all_dat$Race == 1 ] = -1
all_dat$Race[ all_dat$Race == 2 ] = 1
attributes( all_dat$Race ) = list(
  Coding = data.frame(
    Race = c( 'White', 'Non-white' ),
    Value = c(-1,1),
    stringsAsFactors = F ) )

# 3.2.2) Measures of drug use

# Years spent using cannabis
all_dat$Years_of_MJ_use = quick_proprogate( 'years_mj_use' )
attributes( all_dat$Years_of_MJ_use ) = list(
  Units = 'Number of years spent using MJ'
)

# Recency of cannabis use (0 - 2 days)
all_dat$Recency_of_MJ_use = quick_proprogate( 'tlfb_mj_8' )
attributes( all_dat$Recency_of_MJ_use ) = list(
  Units = 'Number of days since last use of MJ'
)

# Level of cannabis use
all_dat$Level_of_MJ_use = quick_proprogate( 'tlfb_mj_14b' )
attributes( all_dat$Level_of_MJ_use ) = list(
  Units = 'Number of times MJ was used in last 30 days'
)

# Level of alcohol use
all_dat$Level_of_alcohol_use = quick_proprogate( 'tlfb_etoh_13b' )
attributes( all_dat$Level_of_alcohol_use ) = list(
  Units = 'Number of times alcohol was used in last 30 days'
)

# Nicotine use
all_dat$Nicotine_use = quick_proprogate( 'nic_user' )
# Convert to effects coding
all_dat$Nicotine_use[ all_dat$Nicotine_use == 0 ] = -1
all_dat$Nicotine_use[ all_dat$Nicotine_use == 1 ] = 1
attributes( all_dat$Nicotine_use ) = list(
  Coding = data.frame(
    Nicotine_use = c( 'No nicotine', 'Nicotine user' ),
    Value = c(-1,1),
    stringsAsFactors = F ) )

# 3.3.3) Primary variables of interest

# THCCOOH level (creatinine adjusted)
all_dat$THCCOOH = raw_dat$ua_thclcmsms_crtadj
attributes( all_dat$THCCOOH ) = list(
  Units = 'Nanograms per milliliter (ng/mL)'
)

# Time since baseline measurement
all_dat$Time = raw_dat$days_since_baseline
attributes( all_dat$THCCOOH ) = list(
  Units = 'Days since first baseline measurement'
)

# Visit number
all_dat$Visit_number = raw_dat$visit_number

# Withdrawal symptoms
all_dat$Withdrawal_intensity = raw_dat$cws_intensity
all_dat$Withdrawal_negative_impact = raw_dat$cws_negimpact

# 3.3.4) Data issues

# Correct data entry issues for subjects 
# with IDs 10051 and 10053:
sel = all_dat$ID == '10051'
all_dat$Time[sel][1:3] = 0:2
sel = all_dat$ID == '10053'
all_dat$Time[sel][1:3] = 0:2

# Define function that determines different types of 
# data issues for each row of the data set
check_for_data_issues = function( r ) {
  
  # Function to concatenate issues
  f = function(x,y) {
    if ( x == '0' ) {
      out = y
    } else {
      out = paste( x, y, sep = ';' )
    }
    return( out )
  }
  
  # Initialize output
  out = '0'
  
  # Flag observations with THC values over the readout ceiling 
  # of the instrument
  if ( !is.na( raw_dat$thc_500_flag[r] ) ) out = f(out,'1')
  
  # Flag subjects who did not recently use THC
  if ( !is.na( raw_dat$thc_recency_flag[r] ) ) out = f(out,'2')
  
  # Check for missing data over variables
  
  # Dependent variables
  if ( is.na( all_dat$THCCOOH[r] ) ) out = f(out,'3')
  if ( is.na( all_dat$Withdrawal_intensity[r] ) ) out = f(out,'4')
  if ( is.na( all_dat$Withdrawal_negative_impact[r] ) ) out = f(out,'5')
  
  # Independent variables
  if ( is.na( all_dat$Time[r] ) ) out = f(out,'6')
  
  # Flag subject who did not appear to maintain abstinence
  if ( raw_dat$id[r] == 10063 ) out = f(out,'7')
  
  return( out )
}

# Apply function to all rows
all_dat$Data_issues = sapply( 1:nrow( all_dat ), 
                              check_for_data_issues )
attributes( all_dat$Data_issues ) = list(
  Coding = data.frame(
    Issue = c( 
      'None',
      'Could not read value over 500',
      'Did not use THC recently',
      'Missing data for THCCOOH',
      'Missing data for withdrawal intensity',
      'Missing data for withdrawal impact',
      'Missing data for days from baseline',
      'Did not maintain abstinence' ),
    Value = 0:7,
    stringsAsFactors = F ) )

# Track data issues by visit number and subject
di = all_dat %>% 
  group_by( Visit_number, ID ) %>% 
  select( Data_issues ) %>% 
  unique
# Remove cases with no issues
di = di[ di$Data_issues != '0', ]

# Track individual issues
di$Flag.No_reading_for_THC_over_500 = 0
di$Flag.No_recent_THC_use = 0
di$Missing.THCCOOH = 0
di$Missing.Withdrawal_intensity = 0
di$Missing.Withdrawal_impact = 0
di$Missing.Days_from_baseline = 0
di$Missing.Failed_abstinence = 0
for ( i in 1:nrow( di ) ) {
  sel = strsplit( di$Data_issues[i], split = ';' )[[1]]
  sel = as.numeric(sel)
  di[i,sel+3] = 1
}
# Arrange based on issue
di = di %>% arrange( Visit_number, Data_issues )
di$Data_issues = NULL

# Save as a table
setwd( dat_dir )
setwd( 'Original_files' )
write.table( di,
             sep = ',',
             row.names = F,
             quote = F,
             file = 'Data_issues.csv'
)
setwd( dat_dir )

# 3.3.5) Create a subject index

all_dat$Subjects = 0
sel1 = all_dat$Data_issues == '0'
sel2 = !sel1
subj = unique( all_dat$ID )
inc = 1
inc2 = length( unique( all_dat$ID[sel1] ) ) + 1
for ( s in 1:length( subj ) ) {
  
  sel = all_dat$ID == subj[s]
  if ( any( all_dat$ID[sel1] %in% subj ) ) {
    all_dat$Subjects[sel] = inc
    inc = inc + 1
  } else {
    all_dat$Subjects[sel] = inc2
    inc2 = inc2 + 1
  }
}

# Clean up workspace
rm( sel, s, sel1, sel2, subj, inc, inc2, di, i )

###
### 4) Extract CUDIT and CWS scores
###

setwd( dat_dir )
setwd( 'Original_files' )

inv_dat = read.csv( file = "CombinedTHC_Updated_07252018 (002).csv", 
                    header = T,
                    stringsAsFactors = F )

# Extract the CUDIT scores
sel = grep( 'cudit', colnames( inv_dat ) )
tmp = inv_dat[,sel]
colnames( tmp ) = paste( 'CUDIT', 1:8, sep = '.' )
init = matrix( NA, nrow( all_dat ), 8 )
colnames( init ) = colnames( tmp )
all_dat = cbind( all_dat, init )


subset = all_dat$ID %in% inv_dat$id
align = rep( NA, nrow( inv_dat ) )
for ( i in 1:nrow( inv_dat ) ) {
  align[i] = which( inv_dat$id == all_dat$ID[subset][i] & 
                      inv_dat$visit_number == 
                      all_dat$Visit_number[subset][i] )
}
all_dat[subset,grep('CUDIT',colnames(all_dat))] = tmp[align,]

###
### 5) Save results
###

setwd( dat_dir )
save( raw_dat, all_dat, file = 'THC_decay.RData' )

setwd( R_dir )

