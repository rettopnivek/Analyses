# Exponential decay model
# Written by Kevin Potter
# email: kevin.w.potter@gmail.com
# Please email me directly if you 
# have any questions or comments
# Last updated 2018-07-18

# Table of contents
# 1) Initial setup
# 2) Define functions
#   2.1) ed_model
#   2.2) mle_ed_tobit
#   2.3) estimate_ed_lm
#   2.4) plot_decay
# 3) 
# 4) Data imputation based on tobit regression

###
### 1) Initial setup
###

source( 'S01_Folder_paths.R' )

# Indicate which code segments to run
run_code = c(
  F, # 1. 
  T, # 2. 
  F,
  F,
  F
)

# Indicate whether figures should be saved as a PDF file
save_plot = F

# Load in useful packages

# Collection of useful functions
my_package_load( 'utilityf', github = T )

# Package for working with data frames
my_package_load( 'dplyr' )

# Package for Bayesian estimation
my_package_load( 'brms' )

# Load in data
setwd( dat_dir )
load( 'THC_decay.RData' )

# Convert days from baseline measurement 
# to days from THC ingestion
cd = all_dat[ all_dat$Data_issues == '0', ]
cd$Time = cd$Time + cd$Recency_of_MJ_use

###
### 2) Define functions
###

# 2.1)
ed_model = function( param, x, log = F ) {
  # Purpose:
  # Computes the predicted THCCOOH values 
  # using an exponential decay model.
  # Arguments:
  # param - A vector with the starting level of 
  #         THCCOOH and the elimation rate
  # x     - A vector with the days since THC 
  #         ingestion
  # log   - Logical; if TRUE, returns the 
  #         log THCCOOH values instead
  # Returns:
  # The predicted log THCCOOH levels per each day.
  
  yhat = log( param[1] ) - param[2] * x
  if ( !log ) yhat = exp( yhat )
  
  return( yhat )
}

# 2.2)
mle_ed_tobit = function( param, dat ) {
  # Purpose:
  # Computes the negative of the summed log-likelihoods 
  # for a tobit regression approach to fit an 
  # exponential decay model with log-normal error.
  # Arguments:
  # param - The starting value, elimination rate, and the 
  #         residual standard deviation parameters.
  # dat   - A list with the days since THC ingestion, 
  #         the THCCOOH levels, and the cut-off below 
  #         which values are rounded down to 0.
  # Returns:
  # The negative of the summed log-likelihoods.
  
  # Extract data
  x = dat$x # Independent variable
  y = dat$y # Dependent variable
  a = dat$a # Cut-off for censored data
  
  # Indicator function for censored data
  I_a = y < a
  y_star = y; y_star[ I_a ] = a
  y_star = log( y_star )
  
  # Compute mean
  mu = ed_model( param[1:2], x, log = T )
  # Extract standard devation for residuals
  sigma = param[3]
  
  # Carry out tobit regression
  p1 = I_a * pnorm( ( y_star - mu )/sigma, log.p = T )
  p2 = (1-I_a) * (dnorm( (y_star - mu)/sigma, log = T )- log( sigma ) )
  sll = sum( p1 + p2 )
  if ( is.na( sll ) ) sll = -Inf
  
  return( -sll )
}

# 2.3)
estimate_ed_lm = function( x, y ) {
  # Purpose:
  # Fits an exponential decay model via 
  # tobit log-linear regression.
  # Arguments:
  # x    - The independent variable
  # y    - The dependent variable
  # Returns:
  # A list with the parameter estimates,
  # the predicted THCCOOH levels, 
  # and the residals.
  
  # Straightforward estimation of the 
  # power law and exponential decay models 
  # requires log transformations, so we 
  # first check for zeroes in the dependent 
  # variable
  is_zero = y == 0
  
  # If there are no zero values, we can simply 
  # use a log-linear model to estimate the 
  # 3 parameters in the model
  if ( !any( is_zero ) ) {
    
    lmf = lm( log( y ) ~ 1 + x )
    est = c( coef( lmf ), sigma( lmf ) )
    est[1] = exp( est[1] )
    est[2] = -est[2]
    
  } else {
    
    # If there are zeros, we can treat them 
    # as censored data (i.e., the actual 
    # values are actually non-zero, but 
    # any value less than a cut-off was 
    # rounded down to zero). Therefore, 
    # we can use tobit regression to 
    # fit the log-linear model
    
    # First, we use the naive estimator 
    # to determine the starting values 
    # for the optimization routine
    sel = y > 0
    ne = lm( log( y[sel] ) ~ 1 + x[sel] )
    st_val = c( coef( ne ), sigma( ne ) )
    st_val[1] = exp( st_val[1] )
    st_val[2] = -st_val[2]
    
    # Set up data to analyze
    dat = list(
      x = x,
      y = y,
      a = 1
    )
    # We can then use the tobit regression likelihood 
    # to estimate the parameters of interest despite 
    # the censored data
    tbtf = tryCatch(
      optim( st_val, mle_ed_tobit, dat = dat,
                  control = list( maxit = 1000 ) ),
      error = function(e) NULL
    )
    
    # If the MLE worked
    if ( !is.null( tbtf ) ) {
      
      est = tbtf$par
      
    } else {
      est = st_val
      warning( 'Tobit regression failed' )
    }
    
  }
  names( est ) = c( 'Baseline', 'Elimination', 'Error' )
  
  # Generate predicted THCCOOH levels
  pred = ed_model( est, x )
  # Compute residuals
  resid_val = y - pred
  
  return( list( est = est, 
                x = x, 
                pred = pred, 
                resid = resid_val ) )
  
}

# 2.4) 
plot_decay = function( dat, new = T, estimate = T ) {
  # Purpose:
  # ...
  # Arguments:
  # dat      - 
  # new      - 
  # estimate - 
  # Returns:
  # ...
  
  # Extract data
  x = dat$Time
  y = dat$THCCOOH
  y_log = log( y )
  id = dat$ID
  Ns = length( unique( id ) )
  
  if ( Ns > 1 ) {
    plt = dat %>% 
      group_by( Time ) %>% 
      summarise(
        R = mean( THCCOOH )
      )
    plt2 = dat %>%
      filter( THCCOOH > 0 ) %>% 
      group_by( Time ) %>% 
      summarise(
        R = mean( log( THCCOOH ) )
      )
                 
  }
  
  if ( estimate ) {
    est = estimate_ed_lm( x, y )
    o = order( est$x )
    x_est = est$x[o]
    y_hat = est$pred[o]
  }
  
  # Create two panes
  if ( new ) x11( width = 12 )
  layout( cbind( 1, 2 ) )
  
  ### Raw data
  
  # Create a blank plot
  xl = c( -1, 35 )
  yl = lowerUpper( 100, y )
  yl[1] = -7.5
  blankPlot( xl, yl )
  
  # Add observations
  points( x, y, pch = 19, col = 'grey' )
  
  # Add mean
  if ( Ns > 1 ) lines( plt$Time, plt$R, lwd = 2 )
  # Add estimates
  if ( estimate ) lines( x_est, y_hat, lwd = 2, col = 'blue' )
  
  # Add axes and labels
  customAxes( xl, yl )
  
  # x-axis
  axis( 1, seq( 0, 32, 4 ),
        tick = F, line = -1, cex.axis = 1.25 )
  mtext( 'Days since THC ingested',
         side = 1, line = 2, cex = 1.25 )
  
  # y-axis
  axis( 2, round( seq( 0, yl[2], length = 5 ) ),
        tick = F, line = -1, cex.axis = 1.25 )
  mtext( 'THCCOOH - ng/mL',
         side = 2, line = 2, cex = 1.25 )
  
  ### Log-transformed data
  
  # Create a blank plot
  sel = y_log > -Inf & y_log < Inf
  yl = lowerUpper( 1, y_log[sel] )
  blankPlot( xl, yl )
  
  horizLines( log(1), xl, lwd = 2, lty = 2, col = 'grey' )
  
  customAxes( xl, yl,
              label = c( 'Days since THC ingestion', 'THCCOOH - log(ng/mL)' ),
              axSz = 1.25 )
  axis( 1, seq( 0, 32, 4 ),
        tick = F, line = -1, cex.axis = 1.25 )
  axis( 2, round( seq( yl[1], yl[2], length = 5 ), 1 ),
        tick = F, line = -1.5, cex.axis = 1.25 )
  
  points( x, y_log, pch = 19 )
  # Add mean
  if ( Ns > 1 ) lines( plt2$Time, plt2$R, lwd = 2 )
  # Add estimates
  if ( estimate ) {
    sel = log( y_hat ) > yl[1]
    lines( x_est[sel], log( y_hat[sel] ), lwd = 2, col = 'blue' )
  }
  
}

###
### 3) Plot of THCCOOH by day
###

if ( run_code[1] ) {
  
  
  plot_decay( cd )
  legend( 'topright',
          c( 'Observed', 'Mean', 'Censored-corrected predicted' ),
          fill = c( 'grey', 'black', 'blue' ),
          bty = 'n', cex = 1.25 )
  title( paste( round( 100 * sum( cd$THCCOOH == 0 )/nrow(cd) ),
                '% total obs. equal 0', sep = '' ) )
  
}

###
### 4) Data imputation based on tobit regression
###

if ( run_code[2] ) {
  
  # Determine subjects with sufficient data
  check = cd %>% 
    group_by( ID ) %>% 
    summarize(
      # Number of observations
      No = length( ID ),
      # Number of zeros
      Nz = sum( THCCOOH == 0 )
    )
  # Non-zero values
  check$Nnz = 
    check$No - check$Nz
  check$Nog1 = 
    check$No > 1
  check$Nnzg1 = 
    check$Nnz > 1
  
  # Take subjects with 2 or more non-zero observations
  dtbf = cd %>% 
    filter( ID %in% check$ID[ check$Nog1 & check$Nnzg1 ] )
  subj = unique( dtbf$ID )
  Ns = length( subj )
  
  all_est = matrix( NA, Ns, 3 )
  all_output = c()
  for ( s in 1:Ns ) all_output = c( all_output, list(NULL) )
  
  # Measure run time
  tick()
  # Initialize progress bar
  pb = txtProgressBar( min = 0, max = Ns, style = 3 )
  for ( s in 1:Ns ) {
    
    sel = dtbf$ID == subj[s]
    est = estimate_ed_lm( dtbf$Time[sel],
                          dtbf$THCCOOH[sel] )
    chk = sum( dtbf$THCCOOH[sel] > 0 )
    if ( chk == 2 ) est$est[3] = 0.0
    all_est[s,] = est$est
    all_output[[s]] = list( est )
    
    # Update the progress bar
    setTxtProgressBar(pb,s)
  }
  close(pb)
  tock()
  print( run_time )
  
  # Data imputation for zeros
  for ( s in 1:Ns ) {
    sel = dtbf$ID == subj[s]
    is_zero = dtbf$THCCOOH[sel] == 0
    if ( any( is_zero ) ) {
      dtbf$THCCOOH[sel][is_zero] = 
        all_output[[s]][[1]][['pred']][is_zero]
    }
  }
  
  # Convert to data frame
  all_est = data.frame(
    ID = subj,
    Start_point = all_est[,1],
    Log_start_point = log( all_est[,1] ), 
    Elimination_rate = all_est[,2],
    Residual_SD = all_est[,3],
    stringsAsFactors = F
  )
  
}

###
### 5) ???
###

if ( all( run_code[2:3] ) ) {
  
  # Empirical bayes priors
  ebp = all_est %>% 
    summarize(
      M_LSP = mean( Log_start_point ),
      SD_LSP = sd( Log_start_point ),
      SEM_LSP = sem( Log_start_point ),
      M_ER = mean( Elimination_rate ),
      SD_ER = sd( Elimination_rate ),
      SEM_ER = sem( Elimination_rate ),
      M_RSD = mean( Residual_SD ),
      SD_RSD = sd( Residual_SD ),
      SEM_RSD = sem( Residual_SD )
    )
  # round( ebp, 1 )
  
  # Set up data
  dtbf$log_THCCOOH = 
    log( dtbf$THCCOOH )
  dtbf$Start_point = 1
  dtbf$Elimination_rate = dtbf$Time
  
  
  # Weakly informative prior on residual error
  prior = set_prior( 'student_t( 10, .33, .5 )', 
                     class = 'sigma' )
  # Prior on starting point
  prior = c( prior,
             set_prior( 'normal( 4.6, 2.5 )', 
                        class = 'b', coef = 'Start_point' ) )
  # Prior on elimination rate
  prior = c( prior,
             set_prior( 'normal( -.25, .5 )', 
                        class = 'b', coef = 'Elimination_rate' ) )
  # Prior on correlation between random effects
  prior = c( prior,
             set_prior( 'lkj_corr_cholesky(1)', 
                        class = 'L' ) )
  
  # Warm up period
  wup = 1000
  # Desired number of iterations
  d_iter = 10000/4
  # Thinning value
  thin = 5
  n_iter = d_iter * 5 + wup
  
  tick()
  m0 = brm( log_THCCOOH ~ 0 + # Remove standard intercept
              # Population effects (Start point)
              Start_point + 
              # Population effects (Elimination rate)
              Elimination_rate +
              # Subject-level effects
              ( 0 + Start_point + Elimination_rate | ID ),
            # Data and priors
            data = dtbf, prior = prior, 
            # Estimation settings
            warmup = wup,
            iter = n_iter,
            chains = 4,
            cores = 4,
            thin = thin, 
            control = list( adapt_delta = 0.995,
                            max_treedepth = 15 ) )
  tock()
  print( run_time )
  
  tick()
  x11(); pp_check( m0 )
  
  x11(); plot( marginal_effects( m0 ), points = T )
  
  for ( i in 1:ceiling( Ns/9 ) ) {
    
    x11()
    ind = 1:9 + 9 * (i-1)
    if ( max( ind ) > Ns ) ind = min(ind):Ns
    conditions = data.frame( ID = unique(dtbf$ID)[ind], stringsAsFactors = F )
    rownames(conditions) = unique(dtbf$ID)[ind]
    Fit_by_subject = marginal_effects( m0, conditions = conditions,
                                       re_formula = NULL, method = "predict")
    plot( Fit_by_subject, nrow = 3, ncol = 3, points = TRUE)
    
  }
  tock()
  print( run_time )
  
}

###
### 6)
###

if ( run_code[4] ) {
  
  # Fit data
  est = estimate_ed_lm( cd$Time, cd$THCCOOH )
  
  part = c(
    T,
    F,
    F
  )
  
  # a) Idealized example
  
  if ( part[1] ) {
    
    # Initialize data frame
    dtbf = data.frame(
      ID = 'Sim',
      Time = 0:34,
      THCCOOH = NA,
      stringsAsFactors = F
    )
    
    # Generating parameters
    gp = c( alpha = NA,
            kappa = runif( 1, .1, .5 ), 
            sigma = runif( 1, .01, .5 ) )
    gp[1] = exp( log( est$est[1] ) + rnorm( 1, 0, est$est[3] ) )
    
    # Curve based on geerating parameters
    true_curve = ed_model( gp, dtbf$Time )
    
    # Simulated data
    dtbf$THCCOOH = log( true_curve ) + rnorm( nrow( dtbf ), 0, gp[3] ) 
    dtbf$THCCOOH = exp( dtbf$THCCOOH )
    
    # Censor data
    sel = dtbf$THCCOOH < 1
    dtbf$THCCOOH[sel] = 0
    
    # Results
    plot_decay( dtbf )
    
  }
  
  # Match actual number of responses
  
  # Reset data
  dtbf$THCCOOH = NA
  # Sample only 7 days out of the month
  sel = c(
    0 + sample( 0:2, size = 1 ),
    round( seq( 5, 34, length = 6 ) ) + 
      sample( -2:2, size = 6, replace = T ) )
  # Example with only 7 visits
  dtbf = dtbf[ sel, ]
  
  # Generating parameters
  gp = runif( 3,
              c( 50, .1, .1 ),
              c( 500, .5, 2 ) )
  names( gp ) = c( 'alpha', 'kappa', 'sigma' )
  true_curve = ed_model( gp, dtbf$Time )
  # Simulated data
  dtbf$THCCOOH = log( true_curve ) + rnorm( nrow( dtbf ), 0, gp[3] ) 
  dtbf$THCCOOH = exp( dtbf$THCCOOH )
  # Censor data
  sel = dtbf$THCCOOH < 1
  dtbf$THCCOOH[sel] = 0
  
  # Estimate model
  est = estimate_ed_lm( dtbf$Time, dtbf$THCCOOH )
  
}

setwd( R_dir )

